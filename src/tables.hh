#ifndef LTX_HIGHLIGHT_CODE_TABLES_HH
#define LTX_HIGHLIGHT_CODE_TABLES_HH

#include <string>

namespace tables {

/// Parameters for highlighting.
struct highlight_params {
    std::string_view lang_name;
    std::span<const char> string_delimiters;
    std::string_view escape_sequences;
    std::string_view line_comment_prefix;
    std::span<const std::string_view> keywords;
    std::span<const std::string_view> types;
};

inline constexpr std::string_view c_keywords[]{
    "_Alignas",
    "_Alignof",
    "_Atomic",
    "_BitInt",
    "_Bool",
    "_Complex",
    "_Decimal32",
    "_Decimal64",
    "_Decimal128",
    "_Generic",
    "_Imaginary",
    "_Noreturn",
    "_Pragma",
    "_Static_assert",
    "_Thread_local",
    "#embed",
    "#error",
    "#include",
    "#line",
    "#pragma",
    "#warning",
    "#define",
    "#undef",
    "#if",
    "#ifdef",
    "#ifndef",
    "#else",
    "#elif",
    "#elifdef",
    "#elifndef",
    "#endif",
    "alignas",
    "alignof",
    "asm",
    "auto",
    "break",
    "case",
    "const",
    "constexpr",
    "continue",
    "default",
    "do",
    "else",
    "enum",
    "extern",
    "false",
    "float",
    "for",
    "fortran",
    "goto",
    "if",
    "inline",
    "NULL",
    "nullptr",
    "register",
    "restrict",
    "return",
    "sizeof",
    "static",
    "static_assert",
    "struct",
    "switch",
    "thread_local",
    "true",
    "typedef",
    "typeof",
    "typeof_unqual",
    "union",
    "volatile",
    "while",
};

inline constexpr std::string_view c_types[]{
    "bool",
    "char",
    "double",
    "float",
    "int",
    "long",
    "short",
    "signed",
    "unsigned",
    "void",
};

inline constexpr highlight_params c_params{
    .lang_name = "C",
    .string_delimiters = "'\"",
    .escape_sequences = "'\"\\nrt",
    .line_comment_prefix = "//",
    .keywords = c_keywords,
    .types = c_types,
};

inline constexpr std::string_view cxx_keywords[]{
    "#include",
    "#define",
    "#undef",
    "#if",
    "#ifdef",
    "#ifndef",
    "#else",
    "#elif",
    "#endif",
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "compl",
    "concept",
    "const",
    "consteval",
    "constexpr",
    "constinit",
    "const_cast",
    "continue",
    "co_await",
    "co_return",
    "co_yield",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "for",
    "friend",
    "goto",
    "if",
    "inline",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "private",
    "protected",
    "public",
    "register",
    "reinterpret_cast",
    "requires",
    "return",
    "sizeof",
    "static",
    "static_assert",
    "static_cast",
    "struct",
    "switch",
    "template",
    "this",
    "thread_local",
    "throw",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq",
};

inline constexpr std::string_view cxx_types[]{
    "bool",
    "char",
    "char8_t",
    "char16_t",
    "char32_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "signed",
    "T",
    "unsigned",
    "void",
    "wchar_t",
};

inline constexpr highlight_params cxx_params{
    .lang_name = "C++",
    .string_delimiters = "'\"",
    .escape_sequences = "'\"\\nrt",
    .line_comment_prefix = "//",
    .keywords = cxx_keywords,
    .types = cxx_types,
};

inline constexpr std::string_view go_keywords[]{
    "break",
    "default",
    "func",
    "interface",
    "any",
    "select",
    "case",
    "defer",
    "go",
    "struct",
    "chan",
    "else",
    "goto",
    "package",
    "switch",
    "const",
    "fallthrough",
    "if",
    "range",
    "type",
    "continue",
    "for",
    "import",
    "return",
    "var",
    "true",
    "false",
    "iota",
    "nil",
};

inline constexpr std::string_view go_types[]{
    "bool",
    "byte",
    "complex64",
    "complex128",
    "error",
    "float32",
    "float64",
    "int",
    "int8",
    "int16",
    "int32",
    "int64",
    "map",
    "rune",
    "string",
    "T",
    "uint",
    "uint8",
    "uint16",
    "uint32",
    "uint64",
    "uintptr",
};

inline constexpr highlight_params go_params{
    .lang_name = "Go",
    .string_delimiters = "\"'",
    .escape_sequences = "'\"\\nrt",
    .line_comment_prefix = "//",
    .keywords = go_keywords,
    .types = go_types,
};

inline constexpr std::string_view intercept_keywords[]{
    "as",
    "else",
    "for",
    "if",
    "type",
    "while",
};

inline constexpr std::string_view intercept_types[]{
    "byte",
    "integer",
    "s8",
    "s16",
    "s32",
    "s64",
    "u8",
    "u16",
    "u32",
    "u64",
    "void",
};

inline constexpr highlight_params intercept_params{
    .lang_name = "Intercept",
    .string_delimiters = "'\"",
    .escape_sequences = "'\"\\nrtfvaeb",
    .line_comment_prefix = ";;",
    .keywords = intercept_keywords,
    .types = intercept_types,
};

} // namespace tables

#endif // LTX_HIGHLIGHT_CODE_TABLES_HH
