\NeedsTeXFormat{LaTeX3}
\ProvidesExplPackage{md-code-blocks}{2023/04/25}{0.2}{Markdown code blocks and syntax highlighting}

\RequirePackage{fontspec}
\RequirePackage{xcolor}

%% Sanity check.
\sys_if_engine_xetex:F {
    \msg_fatal:nn { md-code-blocks } { This~package~requires~Xe(La)TeX }
}

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  API Functions
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NewDocumentCommand \MDEnableHighlighting {} { \bool_gset_true:N \g__md_enable_highlighting_bool }
\NewDocumentCommand \MDDisableHighlighting {} { \bool_gset_false:N \g__md_enable_highlighting_bool }

\NewDocumentCommand \MDSetCodeBlockSkip {m} { \dim_gset:Nx \g__md_block_skip { #1 } }
\NewDocumentCommand \MDSetCodeBlockEmptyLineSkip {m} { \dim_gset:Nx \g__md_lempty_skip { #1 } }
\NewDocumentCommand \MDSetCodeBlockLineSkip {m} { \dim_gset:Nx \g__md_block_lskip { #1 } }
\NewDocumentCommand \MDSetTempFileName {m} { \tl_gset:Nx \g__md_tmp_file_name { #1 } }
\NewDocumentCommand \MDSetHighlightExe {m} { \tl_gset:Nx \g__md_highlight_exe { #1 } }

\NewDocumentCommand \MDAtBeginCodeBlock {m} { \tl_gput_right:Nn \g__md_at_begin_code_block { #1 } }
\NewDocumentCommand \MDAllowBreak {} { \bool_gset_true:N \g__md_allow_break_bool }

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constants
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\int_const:Nx \c__md_backquote_int { 96 }
\tl_const:Nx \c__md_backquote { \char_generate:nn { \c__md_backquote_int } { 12 } }

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  User Configurable Options
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Whether to enable highlighting.
\bool_new:N \g__md_enable_highlighting_bool \bool_gset_true:N \g__md_enable_highlighting_bool

%% Skip to use before and after code blocks.
\dim_new:N \g__md_block_skip \dim_gset:Nn \g__md_block_skip { \medskipamount }

%% Skip to use for empty lines in code blocks.
\dim_new:N \g__md_lempty_skip \dim_gset:Nn \g__md_lempty_skip { \baselineskip }

%% Skip to use for \parskip in code blocks.
\dim_new:N \g__md_block_lskip \dim_gset:Nn \g__md_block_lskip { \smallskipamount }

%% Name of the temporary output file.
\tl_new:N \g__md_tmp_file_name \tl_gset:Nn \g__md_tmp_file_name { temporary.tex }

%% Name of the executable to use for syntax highlighting.
\tl_new:N \g__md_highlight_exe \tl_gset:Nn \g__md_highlight_exe { ltx-highlight-code }

%% Code to run code at the beginning of a code block.
\tl_new:N \g__md_at_begin_code_block

%% Switch to allow page breaks in code blocks.
\bool_new:N \g__md_allow_break_bool

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Colour Handling
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Style name.
\cs_set:Npn \__md_style_name:nn #1#2 { g__md_ #1 _ #2 _style }

%% Set a style.
\cs_set:Npn \__md_set_style #1#2#3 {
    \cs_gset:cn { \__md_style_name:nn {#1}{#2} } { #3 }
}

%% Define a default style.
\cs_set:Npn \__md_set_default_style:nn #1#2 {
    \__md_set_style { Default } { #1 } { #2 }
}

%% This function switches to a colour and style.
\cs_set:Npn \__md_handle_style:nn #1#2 {
    %% New group so we can have nested styles.
    \group_begin:

    %% If the colour is defined (e.g. g__md_C++_Keyword_style), use it.
    \cs_if_exist_use:cTF { \__md_style_name {#1}{#2} } { } {
        %% Otherwise, use the default style if it exists.
        \cs_if_exist_use:cTF { \__md_style_name {Default}{#2} } {} {
            %% If it doesn’t, do nothing, but issue a warning.
            \msg_warning:nn { md-code-blocks } { Unknown~style~`#2'~for~`#1' }
        }
    }
}

%% This function closes a style block.
\cs_set:Nn \__md_close_style: { \group_end: }

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Utils
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Check that we can run shell commands.
\cs_set:Nn \__md_check_shell: {
    \sys_if_shell_unrestricted:TF {} {
        \msg_fatal:nn { md-code-blocks } { This~package~requires~shell~access.~Please~add~the~`--enable-write18'~flag~to~your~LaTeX~command. }
    }
}

%% Remove first skip before next paragraph.
\cs_set:Nn \__md_next_par_unskip {
    \makeatletter
        \everypar { \setbox\z@\lastbox \everypar{} }
    \makeatother
}

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Main Implementation
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Make ` active.
\char_set_catcode_active:n { \c__md_backquote_int }

\char_gset_active_eq:NN ` \__md_single_backquote:w

%% Handle the first ` in a sequence of one or more `.
\cs_set:Npn \__md_single_backquote:w {
    \peek_meaning_remove:NTF ` { \__md_double_backquote:w } {
        \__md_single_backquote_aux:w
    }
}

%% Handle a single `.
\cs_set:Npn \__md_single_backquote_aux:w {
    \group_begin:
    \ttfamily

    %% The next ` closes this group.
    \char_gset_active_eq:NN ` \group_end:
}

%% Handle the second ` in a sequence of two or more `.
\cs_set:Npn \__md_double_backquote:w {
    \peek_meaning_remove:NTF ` { \__md_double_backquote_aux:w } {
        %%% TODO
    }
}

%% Double `` starts code block if followed by another `, else inserts literal `.
%% We still need to consume the second `, so expand a \@gobble first.
\def\@MD@doublebackquote{
    \expandafter\@ifnextchar
    \expandafter`%
    \expandafter{%
    \expandafter\@MD@triplebackquote@start
    \expandafter\@MD@triplebackquote
    \expandafter}%
    \expandafter\@MD@backquote
    \@gobble
}

%% This macro is expanded before the code block is parsed.
\def\@MD@triplebackquote@start{%
	\ifvmode\else\unskip\par\fi
	\vspace\MDCodeBlockSkipAmount
	\begingroup
    \ttfamily
    \@MD@obeyspaces
    \@MD@obeylines
    \@MD@obeybraces
    \@MD@obeyspecial
    \parindent\z@\relax
    \parskip\MDCodeBlockLineSkipAmount\relax
    \let`\@MD@backquote
}

%% Box that wraps the code block to prevent it from being broken across pages.
\long\def\@MD@box#1{%
    \let\@MD@Brk\@MD@Typeset@Brk
    \@MD@begin@codeblockhook
    \if@MD@allow@break#1\else\vbox{#1}\fi
}

%% Triple ``` starts a code block. This macro is expanded after the code block
%% has been parsed.
\long\def\@MD@triplebackquote`[#1]#2```{%
    %% Apply highlighting if we’re supposed to.
    \if@MD@highlight
        %% Write data to a file so we can run a command on it to apply syntax highlighting.
        \@MD@tmpwrite{\noexpand\makeatletter #2 \noexpand\makeatother}%
        %% Apply syntax highlighting to the code in \jobname.tmp
        \immediate\write18{\MDHighlightEXE\space #1 \MDTempFileName\space > \MDTempFileName.1}%
    %% Otherwise, just use the code.
    \else
        \@MD@box{#2}%
    \fi

    %% Close the group.
    \endgroup

    %% Include the formatted code. We need to apply almost the same formatting to it
    %% that we used when the code was parsed.
    \if@MD@highlight
        \begingroup
            \ttfamily
            \parindent\z@\relax
            \@MD@obeylines
            \@MD@obeybraces
            {\@MD@obeyspecial
            \@MD@box{\input{\MDTempFileName.1}}}%
        \endgroup
    \fi

    %% Close the environment.
    \ifvmode\else\unskip\par\fi
    \vspace\MDCodeBlockSkipAmount
    \@MD@nextparunskip
    \@MD@allow@breakfalse
    \@MD@restorelines
}

%
%%% This definition is used when emitting a code block to a file. This
%%% is just a dummy definition that never gets expanded.
%\protected\def\@MD@Brk{\relax}
%
%%% Actual definition of \@MD@Brk. This is basically just \par, but adjusted
%%% so that we actually insert empty lines if there are multiple consecutive
%%% line breaks.
%\def\@MD@Typeset@Brk{\@ifnextchar \@MD@Brk {\vspace\MDEmptyLineSkipAmount}\par}
%
%%% Make line breaks active.
%\def\@MD@restorelines{\catcode`\^^M=5}
%{
%    \catcode`\^^M=\active %
%    \gdef\@MD@obeylines{\catcode`\^^M\active \def^^M{%
%        \@MD@Brk%
%    }}%
%}
%
%%% Treat {} literally.
%\def\@MD@obeybraces{
%    \catcode`{=12
%    \catcode`}=12
%}
%
%%% Treat special characters literally.
%\def\@MD@obeyspecial{
%    \catcode`\#=12\relax
%    \catcode`\%=12\relax
%    \protected\def\\{\textbackslash}%
%}
%
%%% Currently, there is no way of getting this to work in e.g. footnotes w/o doing this, sadly.
%\AtBeginDocument{
%    \catcode`\_=\active\relax
%    \protected\def\_{\textunderscore\allowbreak}%
%    \catcode`~=12\relax
%    \catcode`\^=11\relax
%    \catcode`\&=11\relax
%}
